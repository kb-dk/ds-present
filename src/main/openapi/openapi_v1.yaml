openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    Metadata delivery for the Royal Danish Library
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  /monitor/ping:
    get:
      tags:
        - '${project.name}'
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string

  # This definition uses path: http://example.com/api/article/article-123A-v2
  /record/{id}:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve metadata for the record with the given ID and in the given format'
      operationId: getRecord
      parameters:
        - name: id
          in: path
          description: 'The ID of the record'
          required: true
          schema:
            type: string
            minLength: 1
          examples:
            local:
              value: 'local.test:luftfoto-sample.xml'
              summary: 'Record fetched from fixed local test corpus'
            remote:
              value: 'doms.radio:illum.xml'
              #value: 'remote.images:luftfoto-sample.xml'
              summary: 'Record fetched from (hopefully) running ds-storage'
        - name: format
          in: query
          description: |
            The delivery format for the record:
            * JSON-LD: [Linked Data in JSON](https://json-ld.org/) (default)
            * MODS: [Metadata Object Description Schema](http://www.loc.gov/standards/mods/)
            * SolrJSON: [Solr JSON Formatted Index Updates](https://solr.apache.org/guide/8_8/uploading-data-with-index-handlers.html#json-formatted-index-updates)
            * raw: Metadata unchanged from the source.
          schema:
            type: string
            enum:  ['JSON-LD', 'MODS', 'SolrJSON', "raw"]
            example: 'JSON-LD'
            default: 'JSON-LD'
      responses:
        '200':
          description: 'OK: The record was available in the requested format'
          content:
            application/json:
              schema:
                description: 'Format specific representation of the record in JSON or JSON-LD. Used for JSON-LD'
                type: string
            application/xml:
              schema:
                description: 'Format-specific representation of the record in XML. Used for MODS and SolrJSON'
                type: string
            text/plain:
              schema:
                description: 'Format-specific representation of the record as plain text. Used for raw'
                type: string
        '404':
          description: 'Record ID is unknown'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /records:
    get:
      tags:
        - '${project.name}'
      summary: 'Extract records from a collection after a given mTime and up to a defined maximum. The records are returned in sorted order by mTime increasing. Records marked for delete will also be returned.'
      operationId: getRecords
      x-streamingOutput: true
      parameters:
        - name: collection
          in: query
          description: 'The collection to extract records from'
          required: true
          schema:
            type: string
            example: 'images_hca'
        - name: mTime
          in: query
          description: 'Epoch milliseconds with 3 added digits. It is up to the caller to keep track of mTime when batching the extracting for retrieval between seperate calls'
          required: false
          schema:
            type: integer
            format: int64
            example: 0
            # Default values for longs does not work with the current version of OpenAPI generator
            #default: 0
        - name: maxRecords
          in: query
          description: 'Maximum number of records to return. -1 means no limit'
          required: false
          schema:
            type: integer
            format: int64
            example: 1000
            # Default values for longs does not work with the current version of OpenAPI generator
            #default: 1000
        - name: format
          in: query
          description: |
            The delivery format for the record:
            * JSON-LD: [Linked Data in JSON](https://json-ld.org/) (default)
            * JSON-LD-Lines: [Linked Data in JSON-Lines](https://json-ld.org/)
            * MODS: [Metadata Object Description Schema](http://www.loc.gov/standards/mods/)
            * SolrJSON: [Solr JSON Formatted Index Updates](https://solr.apache.org/guide/8_8/uploading-data-with-index-handlers.html#json-formatted-index-updates)
            * StorageRecord: [ds-storage](https://github.com/kb-dk/ds-storage/) record in JSON
            * StorageRecord-Lines: [ds-storage](https://github.com/kb-dk/ds-storage/) record in JSON-Lines
            Note that deleted records are only represented in the SolrJSON and StorageRecord formats.
            For the other formats, deleted records are skipped silently.
          required: false
          schema:
            type: string
            enum:  ['JSON-LD', 'JSON-LD-Lines', 'MODS', 'SolrJSON', "StorageRecord", "StorageRecord-Lines"]
            example: 'JSON-LD'
            default: 'JSON-LD'
      responses:
        '200':
          description: 'List of records in the requested format'
          content:
            application/ld+json:
              schema:
                description: |
                  JSON-compliant representation of records as linked data. Note that the structure can be unwieldy for
                  parsing large exports, if the receiver does not use a streaming parser.
                  Consider using application/x-ndjson instead
                type: array
                items:
                  type: string
            application/x-ndjson:
              schema:
                description: |
                  Newline separated single-line JSON representations of linked data content.\n
                  See https://json-ld.org/ https://github.com/ndjson/ndjson-spec or https://jsonlines.org/ for the formats
                type: string
            application/xml:
              schema:
                description: 'XML-compliant representation of as MODS records.'
                type: array
                items:
                  type: string
            application/x-solrjsondocuments:
              schema:
                description: |
                  SolrJSONDocuments representation of content, directly indexable in Solr.
                  See [Solr JSON Formatted Index Updates](https://solr.apache.org/guide/8_8/uploading-data-with-index-handlers.html#json-formatted-index-updates)
                type: string
            application/x-storagerecord:
              schema:
                description: |
                  [ds-storage](https://github.com/kb-dk/ds-storage/) record as JSON.
                type: string
            application/x-storagerecord-ndjson:
              schema:
                description: |
                  [ds-storage](https://github.com/kb-dk/ds-storage/) record as JSON-Lines.
                type: string

  /collection/{id}:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve a formal description of a single collection'
      operationId: getCollection
      parameters:
        - name: id
          in: path
          description: 'The ID of the collection'
          required: true
          schema:
            type: string
            minLength: 1
            example: 'images-dsfl'
      responses:
        '200':
          description: 'OK: The collection was known and a description is returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          description: 'Collection is unknown'
          content:
            text/plain:
              schema:
                type: string

  /collections:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve a formal description of all collections'
      operationId: getCollections
      responses:
        '200':
          description: 'OK: Collections are returned'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'

components:
  schemas:

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Collection:
      type: object
      required:
        - id
        - description
        - views
      properties:
        id:
          description: 'The ID of the collection'
          type: string
          example: 'images.dsfl'
        description:
          description: 'A human readable description fo the collection'
          type: string
          example: 'Images from the Danmark Set Fra Luften (Denmark seen from the air) project'
        views:
          description: 'Metadata views (aka formats) supported by this collection'
          type: array
          items:
            $ref: '#/components/schemas/View'

    View:
      type: object
      required:
        - id
        - mime
      properties:
        id:
          description: 'The ID (aka format) of the view'
          type: string
          example: 'jsonld'
        mime:
          description: 'MIME type for the delivered metadata'
          type: string
          example: 'application/json'
