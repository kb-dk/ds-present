openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: |
    Metadata delivery for the Royal Danish Library
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:
  /ping:
    get:
      tags:
        - '${project.name}'
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string

  # This definition uses path: http://example.com/api/article/article-123A-v2
  /record/{id}:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve metadata for the record with the given ID and in the given format'
      operationId: getRecord
      parameters:
        - name: id
          in: path
          description: 'The ID of the record'
          required: true
          schema:
            type: string
            minLength: 1
            example: 'images-dsfl_image-1234'
        - name: format
          in: query
          description: |
            The delivery format for the record:
            * JSON-LD: [Linked Data in JSON](https://json-ld.org/) (default)
            * MODS: [Metadata Object Description Schema[(http://www.loc.gov/standards/mods/)
            * SolrJSON: [Solr JSON Formatted Index Updates)(https://solr.apache.org/guide/8_8/uploading-data-with-index-handlers.html#json-formatted-index-updates)
            * raw: Metadata unchanged from the source.
          schema:
            type: string
            enum:  ['JSON-LD', 'MODS', 'SolrJSON', "raw"]
            example: 'JSON-LD'
            default: 'JSON-LD'
      responses:
        '200':
          description: 'OK: The record was available in the requested format'
          content:
            application/json:
              schema:
                description: 'Format specific representation of the record in JSON or JSON-LD. Used for JSON-LD'
                type: string
            application/xml:
              schema:
                description: 'Format-specific representation of the record in XML. Used for MODS and SolrJSON'
                type: string
            text/plain:
              schema:
                description: 'Format-specific representation of the record as plain text. Used for raw'
                type: string
        '404':
          description: 'Record ID is unknown'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # TODO: Specify records/ (multiple records)
  # The tricky part is how to represent multiple entries as the source can be both JSON & XML (and unknown in the form
  # of raw but maybe raw should not be available here?).
  # Another thing is that JSON can be delivered both as a large array and as JSON-Lines. Likewise, the packing of
  # multiple SolrXMLs is already defined in https://solr.apache.org/guide/8_8/uploading-data-with-index-handlers.html#xml-formatted-index-updates
  # but there is no defined packing of multiole MODS (Sub-TODO: Check is this is true)

  /collection/{id}:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve a formal description of a single collection'
      operationId: getCollection
      parameters:
        - name: id
          in: path
          description: 'The ID of the collection'
          required: true
          schema:
            type: string
            minLength: 1
            example: 'images-dsfl'
      responses:
        '200':
          description: 'OK: The collection was known and a description is returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          description: 'Collection is unknown'
          content:
            text/plain:
              schema:
                type: string

  /collections:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve a formal description of all collections'
      operationId: getCollections
      responses:
        '200':
          description: 'OK: Collections are returned'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'

components:
  schemas:

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Collection:
      type: object
      required:
        - id
        - description
        - views
      properties:
        id:
          description: 'The ID of the collection'
          type: string
          example: 'images-dsfl'
        description:
          description: 'A human readable description fo the collection'
          type: string
          example: 'Images from the Danmark Set Fra Luften (Denmark seen from the air) project'
        views:
          description: 'Metadata views (aka formats) supported by this collection'
          type: array
          items:
            $ref: '#/components/schemas/View'

    View:
      type: object
      required:
        - id
        - mime
      properties:
        id:
          description: 'The ID (aka format) of the view'
          type: string
          example: 'jsonld'
        mime:
          description: 'MIME type for the delivered metadata'
          type: string
          example: 'application/json'
